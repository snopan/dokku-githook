#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

declare PLUGIN_PATH="$PLUGIN_AVAILABLE_PATH/github-hook"
declare hookId=""

removeHook() {
	declare desc="Removes an existing hook from local data and github"
	declare cmd="github-hook:hook-remove"

	# Moves the input down by one so $1 will be the parameters after $cmd
	[[ $1 == $cmd ]] && shift 1

	# The command format is $cmd $hook
	declare hook=$1

	# Make hook and link data operations available
	source "$PLUGIN_PATH/data-operations/hooks"
	source "$PLUGIN_PATH/data-operations/links"

	# Checks if hook exist, if so then assign the hookId to
	# a $retrieveHookId and repositoryShort to $retrieveRepositoryShort
	# this is defined in the hook data operation
	if getHookId $hook
	then
		removeGithubHook $retrieveHookId $retrieveRepositoryShort
		
		# Remove the hook from local data and 
		# any links using the given hook
		deleteHook $hook
		deleteLinkByHook $hook
		echo "Successfully removed hook \"$hook\""
	else
		echo "err: Given hook does not exist"
	fi
}

removeGithubHook() {
	declare hookId=$1
	declare repositoryShort=$2

	# Makes a request to github for removing hook
	# Running this assumes GITHUB_USERNAME and GITHUB_TOKEN
	# is available in the environment variables
	declare response=$(curl \
	-sS \
	-X DELETE \
	-u "$GITHUB_USERNAME:$GITHUB_TOKEN" \
	-H "Accept: application/vnd.github.v3+json" \
	"https://api.github.com/repos/$repositoryShort/hooks/$hookId")

	if [[ -n $response ]]
	then
		echo "github err: $(echo $response | jq '.message')"
	fi
}

removeHook "$@"
systemctl restart github-hook